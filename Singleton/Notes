SINGLETON - Ensures that a class has only one instance, while providing a global access point to this instance.

- Used whenever we want only 1 instance of the class to be created. (Basically used to avoid any situations where multiple instances can lead to issue or conflict)
- Singleton's constructor should be hidden from the client's code. Calling the getInstance() should be the only way of getting the Singleton's object.
- Constructor must be private.
- contains a static public method for returning instance of the class.

Example : 
--------
1. Logging 
(A single logger instance can manage logging throughout the application & controlling log levels)

2. Configuration Management
(you want to ensure all the components of ur application use the same configuration, hence you can store the configuration in a singleton class.This ensures that the configuration is loaded into memory once and shared across the application.)

3. DB connections
(In applications that interact with databases, a Singleton can be used to manage a connection pool)
(You want only a single DB connection, to reduce memory usage & improve performance)
(ensuring that multiple requests reuse the same connection object)

5. Cache Instance (or cache management):
( a Singleton can be employed to manage a cache instance that stores frequently accessed data in memory.)
This helps in improving the performance of the application by reducing the need to fetch data from slower data sources, such as databases or APIs, repeatedly.)

6.User Session Management
(ensuring that session data is consistent and accessible throughout the application.)


Real world example :
-------------------
-There can only be one 'president' of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.
-CEO
-Sun
-Principal


